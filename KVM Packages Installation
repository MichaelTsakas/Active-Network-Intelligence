Several software are being used on the hypervisor in explaining the guide. The following software packages need to be installed:

  yum install qemu-kvm libvirt virt-install hwloc
  systemctl start libvirtd

#	 Enable and start libvirt and libvirt-guests
#  Make sure the result is as follows:
#  libvirtd.service
#  loaded    active   running   Virtualization daemon
#  virt-guest-shutdown.target                                                          
#  loaded    active   active    Libvirt guests shutdown
sudo systemctl enable libvirtd
sudo systemctl start libvirtd
sudo systemctl enable libvirt-guests
sudo systemctl start libvirt-guests
sudo systemctl -a | grep -i "libvirt"


Use the bellow script to add the Admin interface bridge and the extra aux and ch1int and ch1ext interface.

===============================================================


#!/bin/bash

# Let's create the network script files here using heredoc

# admin bridge
cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-admin
DEVICE=admin
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Bridge
EOF

# assign eth0 to the admin bridge
cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
BRIDGE=admin
BOOTPROTO=none
EOF

# aux bridge - no dhcp here
cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-aux
DEVICE=aux
BOOTPROTO=none
ONBOOT=yes
TYPE=Bridge
EOF

#Internal subscriber facing bridge and assign the eth1
cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-ch1int
DEVICE=ch1int
ONBOOT=yes
TYPE=Bridge
BOOTPROTO=none
EOF

cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-eth1
BRIDGE=ch1int
ONBOOT=yes
BOOTPROTO=none
DEVICE=eth1
EOF


#External Internet facing bridge and assign the eth2
cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-ch1ext
DEVICE=ch1ext
ONBOOT=yes
TYPE=Bridge
BOOTPROTO=none
EOF


cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-eth2
BRIDGE=ch1ext
ONBOOT=yes
BOOTPROTO=none
DEVICE=eth2
EOF

#Second Internal subscriber facing bridge and assign the eth3

cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-ch2int
DEVICE=ch2int
ONBOOT=yes
TYPE=Bridge
BOOTPROTO=none
EOF

cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-eth3
BRIDGE=ch2int
ONBOOT=yes
BOOTPROTO=none
DEVICE=eth3
EOF

#Second External Internet facing bridge and assign the eth4
cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-ch2ext
DEVICE=ch2ext
ONBOOT=yes
TYPE=Bridge
BOOTPROTO=none
EOF

cat <<'EOF' > /etc/sysconfig/network-scripts/ifcfg-eth4
BRIDGE=ch2ext
ONBOOT=yes
BOOTPROTO=none
DEVICE=eth4
EOF


service network restart


================================================================



#Find how much memory the system has
free -h

#Update the boot parameters to support 1GB huge pages, disable transparent 
#huge pages and to add 19 Huge pages of 1GB. The max-cstates have been configured to 0
vi /etc/default/grub

# add the bellow betwen the two " inside the GRUB_CMDLINE_LINUX=
intel_iommu=on transparent_hugepage=never hugepages=19 default_hugepagesz=1GB hugepagesz=1GB intel_idle.max_cstate=0 processor.max_cstate=0

#Make the grub config
grub2-mkconfig -o /boot/grub2/grub.cfg
grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg

#Configure hugepages
#create the hugepages file
mkdir /dev/hugepages1G

#add the bellow line in the fstab file
vi /etc/fstab
nodev /dev/hugepages1G hugetlbfs pagesize=1G 0 0

#First create the .service file which will run the /usr/lib/systemd/hugetlb-reserve-pages.sh script at start up.
vi /usr/lib/systemd/system/hugetlb-gigantic-pages.service

[Unit]
Description=HugeTLB Gigantic Pages Reservation
DefaultDependencies=no
Before=dev-hugepages.mount
ConditionPathExists=/sys/devices/system/node
ConditionKernelCommandLine=hugepagesz=1GB
	
[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/lib/systemd/hugetlb-reserve-pages.sh

[Install]
WantedBy=sysinit.target

#Create the script that will configure the 19 Hugepages specifically for node 0.
#If there were two nodes and huge pages were to be allocated on each node, an additional reserve_pages call would be required for the other node.
vi /usr/lib/systemd/hugetlb-reserve-pages.sh

#!/bin/sh

nodes_path=/sys/devices/system/node/
if [ ! -d $nodes_path ]; then
	echo "ERROR: $nodes_path does not exist"
	exit 1
fi

reserve_pages()
{
	echo $1 > $nodes_path/$2/hugepages/hugepages-1048576kB/nr_hugepages
}

reserve_pages 19 node0

  
#change the mod of the file to executable
chmod +x /usr/lib/systemd/hugetlb-reserve-pages.sh

#Enable the service so the script runs at reboot.
systemctl enable hugetlb-gigantic-pages

#Reboot the server to ensure all changes are applied.

#check for the this line in the below command
#nodev /dev/hugepages1G hugetlbfs rw,seclabel,relatime,pagesize=1G 0 0

cat /proc/mounts

#check the hugepages are presisted 
#always madvise [never]
cat /sys/kernel/mm/transparent_hugepage/enabled

#Check the huge page usage. At this point none should be used
#AnonHugePages:         0 kB
#HugePages_Total:      19
#HugePages_Free:       19
#HugePages_Rsvd:        0
#HugePages_Surp:        0
#Hugepagesize:    1048576 kB

grep -i huge /proc/meminfo

#Check maximum c-state is 0
cat /sys/module/intel_idle/parameters/max_cstate

